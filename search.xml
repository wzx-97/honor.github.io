<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>堆排序</title>
    <url>/honor.github.io/2020/12/24/heap-sort/</url>
    <content><![CDATA[<h1 id="堆排序从入门到精通"><a href="#堆排序从入门到精通" class="headerlink" title="堆排序从入门到精通"></a>堆排序从入门到精通</h1><p>吾学堆良久，阅百篇文章，然而未曾见一篇详尽其精髓，便属此文，以便他人学习，如有不足，还望大佬多多赐教。</p>
<h2 id="啥是堆？"><a href="#啥是堆？" class="headerlink" title="啥是堆？"></a>啥是堆？</h2><p>堆是一种数据结构，是一种完全二叉树</p>
<h2 id="啥是完全二叉树？"><a href="#啥是完全二叉树？" class="headerlink" title="啥是完全二叉树？"></a>啥是完全二叉树？</h2><p>尽量满足一个根节点有两个叶节点，（如果都满足了，就是满二叉树），如果满足不了，紧着最左边的使用，也就是说只有最后一层可以出现单节点的情况，而且是右侧不能出现单节点而左侧没有节点的情况。感觉说的不咋好，画个图来说明一下，</p>
<p><img src="https://img-blog.csdnimg.cn/20200902191841316.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d1X3ppeHVhbjk3,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>如上图所示，圆心的数字顺序即代表着添加叶子的顺序，从上到下，从左到右，依次进行，此时，这个就是一个完全二叉树。</p>
<p><img src="https://img-blog.csdnimg.cn/20200902191859594.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d1X3ppeHVhbjk3,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>如上图所示，新添加的节点8，在右侧，但是左侧有单节点和空孩子的节点，使用这个不符合完全二叉树</p>
<p><img src="https://img-blog.csdnimg.cn/20200902191918284.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d1X3ppeHVhbjk3,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>再看这一张，会发现所有的根节点都有左右孩子，不包含单节点的情况，所以这个叫做满二叉树。</p>
<p><strong>小超：满二叉树一定是完全二叉树，但是完全二叉树不一定是满二叉树</strong></p>
<p>咱们进入代码之前，先补习一下数学知识：</p>
<h2 id="Question1：如何得到最后一个非叶子节点？"><a href="#Question1：如何得到最后一个非叶子节点？" class="headerlink" title="Question1：如何得到最后一个非叶子节点？"></a>Question1：如何得到最后一个非叶子节点？</h2><p>傻瓜式找规律：</p>
<p>先给张图：</p>
<p><img src="https://img-blog.csdnimg.cn/20200902191932359.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d1X3ppeHVhbjk3,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<table>
<thead>
<tr>
<th>总节点数（个）</th>
<th>非叶子节点数（个）</th>
<th>最后一个非叶子节点（<strong>编号</strong>）</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>0</td>
<td>null</td>
<td>这个情况没用</td>
</tr>
<tr>
<td>2</td>
<td>0</td>
<td>null</td>
<td>从这个开始找规律</td>
</tr>
<tr>
<td>3</td>
<td>1</td>
<td>0</td>
<td>注意是编号！！！</td>
</tr>
<tr>
<td>4</td>
<td>2</td>
<td>1</td>
<td></td>
</tr>
<tr>
<td>5</td>
<td>2</td>
<td>1</td>
<td>有点意思</td>
</tr>
<tr>
<td>6</td>
<td>3</td>
<td>2</td>
<td></td>
</tr>
<tr>
<td>7</td>
<td>3</td>
<td>2</td>
<td>靠，每两行一样啊</td>
</tr>
<tr>
<td>8</td>
<td>4</td>
<td>3</td>
<td></td>
</tr>
<tr>
<td>9</td>
<td>4</td>
<td>3</td>
<td>是不是明白了？</td>
</tr>
<tr>
<td>…</td>
<td>…</td>
<td>…</td>
<td>还想不明白？无语了</td>
</tr>
<tr>
<td>arr.lengh</td>
<td>arr.lengh / 2</td>
<td>(arr.lenght / 2) - 1</td>
<td>总节点数就是数组的长度</td>
</tr>
</tbody></table>
<h2 id="Question2：如何得到倒数第二个非叶子节点？"><a href="#Question2：如何得到倒数第二个非叶子节点？" class="headerlink" title="Question2：如何得到倒数第二个非叶子节点？"></a>Question2：如何得到倒数第二个非叶子节点？</h2><p>现在有个疑问，倒数第二个是从下往上找还是从左往右找？</p>
<p>因为从构建堆开始，我们是从上到下，从左到右进行的，所以倒数的找就是从右往左，从下到上，如上图所示。倒数的非叶子节点就是：6、5、4、3、2、1、0，具有极强的规律性</p>
<p>用代码表示就是(arr.lenght / 2) - 1 -1</p>
<p>相信找出倒数第三个非叶子节点也能明白了吧？那就再减1呗</p>
<p>该进入正题了，别急，再了解两个概念</p>
<h2 id="大顶堆"><a href="#大顶堆" class="headerlink" title="大顶堆"></a>大顶堆</h2><p>每个非叶子节点的值都大于等于其左右孩子的数值<br> <img src="https://img-blog.csdnimg.cn/20200902192015278.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d1X3ppeHVhbjk3,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h2 id="小顶堆"><a href="#小顶堆" class="headerlink" title="小顶堆"></a>小顶堆</h2><p>还用我解释？哼</p>
<h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><h3 id="思想："><a href="#思想：" class="headerlink" title="思想："></a>思想：</h3><p>将数组构建成一个大顶堆（别抬杠，小顶堆也行），然后把根节点的元素和最后一个元素进行调换，此时末尾就是最大值，然后将剩余n-1个元素重新构建成一个堆，同上执行，得到第二个大的，如此反复，就实现排序了</p>
<h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapSort</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> []arr = &#123;<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;</span><br><span class="line">        sort(arr);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//构建大顶堆</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = arr.length / <span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">			<span class="comment">//从第一个非叶子节点</span></span><br><span class="line">			adjustHeap(arr, i, arr.length);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//调整堆结构，交换堆顶元素和末尾元素</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = arr.length - <span class="number">1</span> ; j &gt; <span class="number">0</span> ; j--) &#123;</span><br><span class="line">			swap(arr , <span class="number">0</span>, j);</span><br><span class="line">			adjustHeap(arr, <span class="number">0</span>, j);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> temp = arr[a];</span><br><span class="line">		arr[a] = arr[b];</span><br><span class="line">		arr[b] = temp;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">adjustHeap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> temp = arr[i];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> k = i * <span class="number">2</span> + <span class="number">1</span>; k &lt; length ; k = k * <span class="number">2</span> + <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span>(k + <span class="number">1</span> &lt; length &amp;&amp; arr[k] &lt; arr[k+<span class="number">1</span>]) &#123;</span><br><span class="line">				k++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(arr[k] &gt; temp) &#123;</span><br><span class="line">				arr[i] = arr[k];</span><br><span class="line">				i = k;</span><br><span class="line">			&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		arr[i] = temp;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">12345678910111213141516171819202122232425262728293031323334353637383940414243</span></span><br></pre></td></tr></table></figure>
<h3 id="代码解释："><a href="#代码解释：" class="headerlink" title="代码解释："></a>代码解释：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">adjustHeap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//建立临时变量，存储非叶子节点的值</span></span><br><span class="line">		<span class="keyword">int</span> temp = arr[i];</span><br><span class="line">		<span class="comment">//这层for循环比较难懂，我来详细解释一下：</span></span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * k = i * 2 + 1 ========== 找到非叶子节点的座孩子，因为它至少有一个孩子，最多两</span></span><br><span class="line"><span class="comment">		 * k &lt; length  =========== 别越界</span></span><br><span class="line"><span class="comment">		 * k = k * 2 + 1 ========== 难点在此，也是堆排序的精髓</span></span><br><span class="line"><span class="comment">		 * 		如果一个堆的节点发生了变动，那么叶子节点改变了，叶子节点如果是另一个堆的节点，那么</span></span><br><span class="line"><span class="comment">		 * 		该堆也发生了变动，就好像是一个蝴蝶效应，引发了一系列的连锁反应，咱们用图来说明一下</span></span><br><span class="line"><span class="comment">		 		见下图</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> k = i * <span class="number">2</span> + <span class="number">1</span>; k &lt; length ; k = k * <span class="number">2</span> + <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="comment">//以下的所有代码就是办了一件事：把该非叶子节点换成他们当中的最大的</span></span><br><span class="line">			<span class="keyword">if</span>(k + <span class="number">1</span> &lt; length &amp;&amp; arr[k] &lt; arr[k+<span class="number">1</span>]) &#123;</span><br><span class="line">				<span class="comment">//如果该叶子有右侧兄弟 &amp;&amp; 该叶子的值 小于 右侧兄弟,k + 1</span></span><br><span class="line">				k++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(arr[k] &gt; temp) &#123;</span><br><span class="line">				<span class="comment">//如果该叶子的值大于其父亲的值，那么赋值给父亲</span></span><br><span class="line">				arr[i] = arr[k];</span><br><span class="line">				<span class="comment">//把k赋值给i，让i指向小的叶子元素</span></span><br><span class="line">				i = k;</span><br><span class="line">			&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//i指向的被赋值</span></span><br><span class="line">		arr[i] = temp;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="number">123456789101112131415161718192021222324252627282930</span></span><br></pre></td></tr></table></figure>
<p>连锁反应：</p>
<p><img src="https://img-blog.csdnimg.cn/20200902192037467.png#pic_center" alt="在这里插入图片描述"></p>
<p>如果1号元素和4号元素的调换了，那么由原先的编号4、9、10三个编号组成的堆，替换成编号1、9、10组成的堆，如图</p>
<p><img src="https://img-blog.csdnimg.cn/20200902192048848.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d1X3ppeHVhbjk3,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>该堆（1、9、10）发生了变化，所以需要重新构建，代码中的 k = k * 2 +  1，就是找到下一个堆的非叶子节点的过程，按照计算机的角度来说，不能像人眼一样特别直观，也就是说计算机不知道是左孩子和右孩子是否发生了改变，所以，得先找到他的左侧孩子，就是 k = k * 2 + 1 ，举个例子说明一下：根据上图，4号节点发生了改变，四号节点错处的是第二个位置，也就是序号为1，那么k * 2 + 1 ，就是3,3号元素就是现在4号元素的左侧节点。（思想真是太高了！！！！）</p>
<p>最难的部分已经解释完毕，是不是非常的清晰明了了？</p>
<h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>堆排序是利用<strong>堆</strong>这种数据结构而设计的一种排序算法，堆排序是一种<strong>选择排序，</strong>它的最坏，最好，平均时间复杂度均为O(nlogn)，它也是不稳定排序。</p>
<p>小抄：稳定排序就是指一串待排序的数组，若有两个元素是一样的，且位置相邻，排序之后，他们原先占有的地址顺序不变，也就是说，其中有两个元素都是5，例如【4、9、6、8、5、5、1】，我们把第一个出现的5当做第5号坑，第二个5当做第6号坑，经过排序之后，他们所占的坑位号顺序不变，就是稳定的，反之就是不稳定的，通俗的话说，就是能让计算机对于数据的排序操作的次数最少的就是稳定的。</p>
<h3 id="对比其他"><a href="#对比其他" class="headerlink" title="对比其他"></a>对比其他</h3><p>咱先不百度，自己分析一下，通过代码可以知道，堆排序是没有最好和最坏的情况，因为他是从最后一个非叶子节点开始的，所以他的时间复杂度都是一样的，而且堆排序占用内存较少，</p>
<p>堆排序比较和交换次数比快速排序多，所以平均而言比快速排序慢，也就是常数因子比快速排序大，如果你需要的是“排序”，那么绝大多数场合都应该用快速排序而不是其它的O(nlogn)算法。</p>
<p>但有时候你要的不是“排序”，而是另外一些与排序相关的东西，比如最大/小的元素，topK之类，这时候堆排序的优势就出来了。用堆排序可以在N个元素中找到top K，时间复杂度是O(N log K)，空间复杂的是O(K)，而快速排序的空间复杂度是O(N)，也就是说，如果你要在很多元素中找很少几个top  K的元素，或者在一个巨大的数据流里找到top K，快速排序是不合适的，堆排序更省地方。</p>
<p>另外一个适合用heap的场合是优先队列，需要在一组不停更新的数据中不停地找最大/小元素，快速排序也不合适。</p>
<h2 id="例题：Top-K问题"><a href="#例题：Top-K问题" class="headerlink" title="例题：Top K问题"></a>例题：Top K问题</h2><h3 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h3><p>设计一个算法，找出数组中最小的k个数。以任意顺序返回这k个数均可。</p>
<p><a href="https://leetcode-cn.com/problems/smallest-k-lcci/">https://leetcode-cn.com/problems/smallest-k-lcci/</a></p>
<p>示例：</p>
<p>输入： arr = [1,3,5,7,2,4,6,8], k = 4<br> 输出： [1,2,3,4]</p>
<h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] smallestK(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        <span class="keyword">int</span> len = arr.length;</span><br><span class="line">        <span class="keyword">if</span> (k &gt;= len) &#123;</span><br><span class="line">            <span class="keyword">return</span> arr;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        buildMinHeap(arr, len);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> pos = len - k;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = len - <span class="number">1</span>; i &gt;= pos; i--) &#123;</span><br><span class="line">            swap(arr, <span class="number">0</span>, i);</span><br><span class="line">            heapify(arr, <span class="number">0</span>, --len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] ret = <span class="keyword">new</span> <span class="keyword">int</span>[k];</span><br><span class="line">        System.arraycopy(arr, pos, ret, <span class="number">0</span>, k);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">buildMinHeap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = (len - <span class="number">1</span>) / <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            heapify(arr, i, len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">heapify</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= len) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> min = i;</span><br><span class="line">        <span class="keyword">int</span> c1 = <span class="number">2</span> * i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> c2 = <span class="number">2</span> * i + <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (c1 &lt; len &amp;&amp; arr[c1] &lt; arr[min]) &#123;</span><br><span class="line">            min = c1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (c2 &lt; len &amp;&amp; arr[c2] &lt; arr[min]) &#123;</span><br><span class="line">            min = c2;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (min != i) &#123;</span><br><span class="line">            swap(arr, i, min);</span><br><span class="line">            heapify(arr, min, len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = arr[i];</span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        arr[j] = tmp;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
        <category>排序</category>
        <category>堆排序</category>
      </categories>
      <tags>
        <tag>排序</tag>
        <tag>堆排序</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/honor.github.io/2020/12/24/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>分类65</category>
      </categories>
      <tags>
        <tag>标签1</tag>
        <tag>标签2</tag>
        <tag>标签3</tag>
      </tags>
  </entry>
  <entry>
    <title>my-first-page</title>
    <url>/honor.github.io/2020/12/24/my-first-page/</url>
    <content><![CDATA[<h1 id="你好，小伙伴"><a href="#你好，小伙伴" class="headerlink" title="你好，小伙伴"></a>你好，小伙伴</h1><p>不知道是因为什么样的契机让你能看到这篇文章，也许你刚刚毕业，就像现在的我，也许你工作许久，成家立业，不管怎样，我们有缘通过网络连接彼此。我会在这个博客上面更新我的技术文章，也期望得到交流、互相促进，一起进步。</p>
]]></content>
  </entry>
  <entry>
    <title>recyclerview系列教程——实现动画效果</title>
    <url>/honor.github.io/2020/12/29/rv-anim/</url>
    <content><![CDATA[<h1 id="recyclerview系列教程——实现动画效果"><a href="#recyclerview系列教程——实现动画效果" class="headerlink" title="recyclerview系列教程——实现动画效果"></a>recyclerview系列教程——实现动画效果</h1><p>简简单单实现了数据加载的功能，不满足我们的要求，我们要如何给我们的每个条目设置动画呢？</p>
<h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><p><img src="https://img-blog.csdnimg.cn/20201229175628107.gif" alt="img"></p>
<h2 id="知识储备"><a href="#知识储备" class="headerlink" title="知识储备"></a>知识储备</h2><h3 id="setLayoutAnimation"><a href="#setLayoutAnimation" class="headerlink" title="setLayoutAnimation"></a>setLayoutAnimation</h3><p>recyclerview是继承viewgroup的，所以viewgroup的一些方法，recyclerview也可以实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Sets the layout animation controller used to animate the group&#x27;s</span></span><br><span class="line"><span class="comment"> * children after the first layout.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> controller the animation controller</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLayoutAnimation</span><span class="params">(LayoutAnimationController controller)</span> </span>&#123;</span><br><span class="line">    mLayoutAnimationController = controller;</span><br><span class="line">    <span class="keyword">if</span> (mLayoutAnimationController != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mGroupFlags |= FLAG_RUN_ANIMATION;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="分解动画元素"><a href="#分解动画元素" class="headerlink" title="分解动画元素"></a>分解动画元素</h3><p>我们看到的动画是一个个的，所以我们只需要针对每一个item做动画处理，连起来就有了动画效果</p>
<h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><h3 id="加载动画"><a href="#加载动画" class="headerlink" title="加载动画"></a>加载动画</h3><p>在activity中设置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Animation loadAnim = AnimationUtils.loadAnimation(<span class="keyword">this</span>,R.anim.item_anim_translate);</span><br><span class="line">LayoutAnimationController layoutAnimationController = <span class="keyword">new</span> LayoutAnimationController(loadAnim);</span><br><span class="line">layoutAnimationController.setOrder(LayoutAnimationController.ORDER_NORMAL);</span><br><span class="line">sliderv.setLayoutAnimation(layoutAnimationController);</span><br></pre></td></tr></table></figure>
<h3 id="滚动动画"><a href="#滚动动画" class="headerlink" title="滚动动画"></a>滚动动画</h3><p>在adaptar中设置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(<span class="meta">@NonNull</span> <span class="keyword">final</span> InnerHoder holder, <span class="keyword">final</span> <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">    holder.textView.setText(datas.get(position));</span><br><span class="line">    <span class="keyword">if</span> (onDelClickListener != <span class="keyword">null</span>)&#123;</span><br><span class="line">        holder.btn_del.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                onDelClickListener.delItem(position);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    Animation animation = AnimationUtils.loadAnimation(holder.itemView.getContext(),R.anim.scale_50_to_100);</span><br><span class="line">    holder.itemView.startAnimation(animation);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="资源文件中添加动画代码"><a href="#资源文件中添加动画代码" class="headerlink" title="资源文件中添加动画代码"></a>资源文件中添加动画代码</h3><p>R.anim.scale_50_to_100</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line">&lt;set xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">    android:interpolator=<span class="string">&quot;@android:anim/accelerate_interpolator&quot;</span></span><br><span class="line">    &gt;</span><br><span class="line">    &lt;!--缩放动画标签--&gt;</span><br><span class="line">    &lt;scale</span><br><span class="line">        android:fromXScale=<span class="string">&quot;0.5&quot;</span></span><br><span class="line">        android:toXScale=<span class="string">&quot;1.0&quot;</span></span><br><span class="line">        android:fromYScale=<span class="string">&quot;0.5&quot;</span></span><br><span class="line">        android:toYScale=<span class="string">&quot;1.0&quot;</span></span><br><span class="line">        android:pivotX=<span class="string">&quot;50%&quot;</span></span><br><span class="line">        android:pivotY=<span class="string">&quot;50%&quot;</span></span><br><span class="line">        android:duration=<span class="string">&quot;1000&quot;</span>/&gt;</span><br><span class="line">&lt;/set&gt;</span><br></pre></td></tr></table></figure>
<p>R.anim.item_anim_translate</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line">&lt;set xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">    android:duration=<span class="string">&quot;500&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;translate</span><br><span class="line">        android:fromXDelta=<span class="string">&quot;100%p&quot;</span></span><br><span class="line">        android:fromYDelta=<span class="string">&quot;0&quot;</span></span><br><span class="line">        android:toXDelta=<span class="string">&quot;0&quot;</span></span><br><span class="line">        android:toYDelta=<span class="string">&quot;0&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;alpha</span><br><span class="line">        android:fromAlpha=<span class="string">&quot;0&quot;</span></span><br><span class="line">        android:toAlpha=<span class="string">&quot;100&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/set&gt;</span><br></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>布局加载对应的父类是viewgroup</p>
<p>单个item的滚动应在adaptar中做操作</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><a href="https://gitee.com/wuzixuan97/rv_plus.git">https://gitee.com/wuzixuan97/rv_plus.git</a></p>
<h2 id="问题和建议"><a href="#问题和建议" class="headerlink" title="问题和建议"></a>问题和建议</h2>]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>recyclerview</tag>
      </tags>
  </entry>
  <entry>
    <title>recyclerview系列教程——实现分割线和点击事件</title>
    <url>/honor.github.io/2020/12/29/rv-div/</url>
    <content><![CDATA[<h1 id="recyclerview系列教程——实现分割线和点击事件"><a href="#recyclerview系列教程——实现分割线和点击事件" class="headerlink" title="recyclerview系列教程——实现分割线和点击事件"></a>recyclerview系列教程——实现分割线和点击事件</h1><p>recyclerview要添加分割线，是要重写RecyclerView.ItemDecoration这个类的</p>
<p>响应点击和长按事件，只需要给adaptar设置一个接口，并在activity中回调该接口的方法就可以了</p>
<h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><p><img src="https://img-blog.csdnimg.cn/20201229175630342.gif" alt="img"></p>
<h2 id="知识储备"><a href="#知识储备" class="headerlink" title="知识储备"></a>知识储备</h2><p>ItemDecoration是一个recyclerview内部的一个抽象类，所以我们要想使用必须实现他的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemDecoration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(<span class="meta">@NonNull</span> Canvas c, <span class="meta">@NonNull</span> RecyclerView parent, <span class="meta">@NonNull</span> State state)</span> </span>&#123;</span><br><span class="line">           onDraw(c, parent);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="meta">@Deprecated</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(<span class="meta">@NonNull</span> Canvas c, <span class="meta">@NonNull</span> RecyclerView parent)</span> </span>&#123;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDrawOver</span><span class="params">(<span class="meta">@NonNull</span> Canvas c, <span class="meta">@NonNull</span> RecyclerView parent,</span></span></span><br><span class="line"><span class="function"><span class="params">               <span class="meta">@NonNull</span> State state)</span> </span>&#123;</span><br><span class="line">           onDrawOver(c, parent);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="meta">@Deprecated</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDrawOver</span><span class="params">(<span class="meta">@NonNull</span> Canvas c, <span class="meta">@NonNull</span> RecyclerView parent)</span> </span>&#123;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="meta">@Deprecated</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getItemOffsets</span><span class="params">(<span class="meta">@NonNull</span> Rect outRect, <span class="keyword">int</span> itemPosition,</span></span></span><br><span class="line"><span class="function"><span class="params">               <span class="meta">@NonNull</span> RecyclerView parent)</span> </span>&#123;</span><br><span class="line">           outRect.set(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getItemOffsets</span><span class="params">(<span class="meta">@NonNull</span> Rect outRect, <span class="meta">@NonNull</span> View view,</span></span></span><br><span class="line"><span class="function"><span class="params">               <span class="meta">@NonNull</span> RecyclerView parent, <span class="meta">@NonNull</span> State state)</span> </span>&#123;</span><br><span class="line">           getItemOffsets(outRect, ((LayoutParams) view.getLayoutParams()).getViewLayoutPosition(),</span><br><span class="line">                   parent);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><h3 id="a-继承ItemDecoration"><a href="#a-继承ItemDecoration" class="headerlink" title="a,继承ItemDecoration"></a>a,继承ItemDecoration</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinearLayoutItemDecoration</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ItemDecoration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Drawable mDivider;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinearLayoutItemDecoration</span><span class="params">(Context context, <span class="keyword">int</span> drawableResourceId)</span> </span>&#123;</span><br><span class="line">        mDivider = ContextCompat.getDrawable(context, drawableResourceId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 留出分割线位置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getItemOffsets</span><span class="params">(<span class="meta">@NonNull</span> Rect outRect, <span class="meta">@NonNull</span> View view, <span class="meta">@NonNull</span> RecyclerView parent, <span class="meta">@NonNull</span> RecyclerView.State state)</span> </span>&#123;</span><br><span class="line">        outRect.bottom += mDivider.getIntrinsicHeight();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(<span class="meta">@NonNull</span> Canvas canvas, <span class="meta">@NonNull</span> RecyclerView parent, <span class="meta">@NonNull</span> RecyclerView.State state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> childCount = parent.getChildCount();</span><br><span class="line"></span><br><span class="line">        Rect rect = <span class="keyword">new</span> Rect();</span><br><span class="line">        rect.left = parent.getPaddingLeft();</span><br><span class="line">        rect.right = parent.getWidth() - parent.getPaddingRight();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">            rect.bottom = parent.getChildAt(i).getTop();</span><br><span class="line">            rect.top = rect.bottom - mDivider.getIntrinsicHeight();</span><br><span class="line"></span><br><span class="line">            mDivider.setBounds(rect);</span><br><span class="line">            mDivider.draw(canvas);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="b-在activtiy中设置分割线的属性"><a href="#b-在activtiy中设置分割线的属性" class="headerlink" title="b,在activtiy中设置分割线的属性"></a>b,在activtiy中设置分割线的属性</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化对象</span></span><br><span class="line">linearLayoutItemDecoration = <span class="keyword">new</span> LinearLayoutItemDecoration(<span class="keyword">this</span>,R.drawable.rv_divider);</span><br><span class="line"><span class="comment">//添加分割线对象（我们刚刚自定义的）</span></span><br><span class="line">recyclerview.addItemDecoration(linearLayoutItemDecoration);</span><br></pre></td></tr></table></figure>
<h3 id="c-在adaptar中定义接口"><a href="#c-在adaptar中定义接口" class="headerlink" title="c,在adaptar中定义接口"></a>c,在adaptar中定义接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//点击接口</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setiItenClick</span><span class="params">(IItenClick iItenClick)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.iItenClick = iItenClick;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IItenClick</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">onItenClick</span><span class="params">(<span class="keyword">int</span> position)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//长按接口</span></span><br><span class="line">IItemLongClick iItemLongClick;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setiItemLongClick</span><span class="params">(IItemLongClick iItemLongClick)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.iItemLongClick = iItemLongClick;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IItemLongClick</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">onItemLongClick</span><span class="params">(<span class="keyword">int</span> position)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="d-在onBindViewHolder中设置该接口的实现方法"><a href="#d-在onBindViewHolder中设置该接口的实现方法" class="headerlink" title="d,在onBindViewHolder中设置该接口的实现方法"></a>d,在onBindViewHolder中设置该接口的实现方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(<span class="meta">@NonNull</span> InnerHoder holder, <span class="keyword">final</span> <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">    holder.textView.setText(datas.get(position));</span><br><span class="line">    <span class="keyword">if</span> (iItenClick != <span class="keyword">null</span>)&#123;</span><br><span class="line">        holder.itemView.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                iItenClick.onItenClick(position);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (iItemLongClick != <span class="keyword">null</span>)&#123;</span><br><span class="line">        holder.itemView.setOnLongClickListener(<span class="keyword">new</span> View.OnLongClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onLongClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> iItemLongClick.onItemLongClick(position);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="e-在activity中回调该接口"><a href="#e-在activity中回调该接口" class="headerlink" title="e,在activity中回调该接口"></a>e,在activity中回调该接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">rvSimpleAdaptar = <span class="keyword">new</span> RVSimpleAdaptar(<span class="keyword">this</span>,datalist);</span><br><span class="line">rvSimpleAdaptar.setiItenClick(<span class="keyword">new</span> RVSimpleAdaptar.IItenClick() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItenClick</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(ClickAndDividerActivity.<span class="keyword">this</span>,<span class="string">&quot;Click at &quot;</span>+position,Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">rvSimpleAdaptar.setiItemLongClick(<span class="keyword">new</span> RVSimpleAdaptar.IItemLongClick() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onItemLongClick</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(ClickAndDividerActivity.<span class="keyword">this</span>,<span class="string">&quot;LongClick at &quot;</span>+position,Toast.LENGTH_SHORT).show();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>分割线是要我们自定义的，可以是图片也可以是其他资源文件</p>
<p>长按和点击或者其他事件，是需要我们通过接口回调的方式去实现的</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><a href="https://gitee.com/wuzixuan97/rv_plus.git">https://gitee.com/wuzixuan97/rv_plus.git</a></p>
<h2 id="问题和建议"><a href="#问题和建议" class="headerlink" title="问题和建议"></a>问题和建议</h2>]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>recyclerview</tag>
      </tags>
  </entry>
  <entry>
    <title>recyclerview系列教程——添加头部和底部</title>
    <url>/honor.github.io/2020/12/29/rv-head/</url>
    <content><![CDATA[<h1 id="recyclerview系列教程——添加头部和底部"><a href="#recyclerview系列教程——添加头部和底部" class="headerlink" title="recyclerview系列教程——添加头部和底部"></a>recyclerview系列教程——添加头部和底部</h1><h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><p><img src="https://img-blog.csdnimg.cn/2020122917562933.gif" alt="img"></p>
<h2 id="知识储备"><a href="#知识储备" class="headerlink" title="知识储备"></a>知识储备</h2><p>看过之前的博客都知道，这种情况肯定需要重写adapter，recyclerview的啦</p>
<h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><p>（代码较长，ctrl准备！）</p>
<h3 id="adaptar代码"><a href="#adaptar代码" class="headerlink" title="adaptar代码"></a>adaptar代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 可以添加头部和底部的Adapter</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WrapRecyclerAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">RecyclerView</span>.<span class="title">ViewHolder</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据列表Adapter,不包含头部底部</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> RecyclerView.Adapter mAdapter;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 头部</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> SparseArray&lt;View&gt; mHeaderViews;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 底部</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> SparseArray&lt;View&gt; mFooterViews;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 基本的头部类型开始位置 用于viewType</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> BASE_ITEM_TYPE_HEADER = <span class="number">1000000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 基本的底部类型开始位置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> BASE_ITEM_TYPE_FOOTER = <span class="number">2000000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WrapRecyclerAdapter</span><span class="params">(RecyclerView.Adapter adapter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mAdapter = adapter;</span><br><span class="line">        mHeaderViews = <span class="keyword">new</span> SparseArray&lt;&gt;();</span><br><span class="line">        mFooterViews = <span class="keyword">new</span> SparseArray&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> RecyclerView.<span class="function">ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(<span class="meta">@NonNull</span> ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isHeaderViewType(viewType)) &#123;</span><br><span class="line">            <span class="keyword">return</span> createHeaderFooterViewHolder(mHeaderViews.get(viewType));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isFooterViewType(viewType)) &#123;</span><br><span class="line">            <span class="keyword">return</span> createHeaderFooterViewHolder(mFooterViews.get(viewType));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//列表</span></span><br><span class="line">        <span class="keyword">return</span> mAdapter.onCreateViewHolder(parent, viewType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是不是头部类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isHeaderViewType</span><span class="params">(<span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> position = mHeaderViews.indexOfKey(viewType);</span><br><span class="line">        <span class="keyword">return</span> position &gt;= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是不是底部类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isFooterViewType</span><span class="params">(<span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> position = mFooterViews.indexOfKey(viewType);</span><br><span class="line">        <span class="keyword">return</span> position &gt;= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建头部和底部的ViewHolder</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> view View</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ViewHolder</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> RecyclerView.<span class="function">ViewHolder <span class="title">createHeaderFooterViewHolder</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RecyclerView.ViewHolder(view) &#123;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(<span class="meta">@NonNull</span> RecyclerView.ViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 头部不需要绑定数据</span></span><br><span class="line">        <span class="keyword">if</span> (isHeaderPosition(position) || isFooterPosition(position)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 计算一下位置</span></span><br><span class="line">        position = position - mHeaderViews.size();</span><br><span class="line">        mAdapter.onBindViewHolder(holder, position);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是不是底部位置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isFooterPosition</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> position &gt;= (mHeaderViews.size() + mAdapter.getItemCount());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是不是头部位置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isHeaderPosition</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> position &lt; mHeaderViews.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得item的返回值viewType传入onCreateViewHolder方法的参数viewType中</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> position int</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> viewType</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemViewType</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isHeaderPosition(position)) &#123;</span><br><span class="line">            <span class="comment">// 直接返回position位置的key</span></span><br><span class="line">            <span class="keyword">return</span> mHeaderViews.keyAt(position);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (isFooterPosition(position)) &#123;</span><br><span class="line">            <span class="comment">// 直接返回position位置的key</span></span><br><span class="line">            position = position - mHeaderViews.size() - mAdapter.getItemCount();</span><br><span class="line">            <span class="keyword">return</span> mFooterViews.keyAt(position);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回列表Adapter的getItemViewType</span></span><br><span class="line">        position = position - mHeaderViews.size();</span><br><span class="line">        <span class="keyword">return</span> mAdapter.getItemViewType(position);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mAdapter.getItemCount() + mHeaderViews.size() + mFooterViews.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addHeaderView</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> position = mHeaderViews.indexOfValue(view);</span><br><span class="line">        <span class="keyword">if</span> (position &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            mHeaderViews.put(BASE_ITEM_TYPE_HEADER++, view);</span><br><span class="line">        &#125;</span><br><span class="line">        notifyDataSetChanged();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFooterView</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> position = mFooterViews.indexOfValue(view);</span><br><span class="line">        <span class="keyword">if</span> (position &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            mFooterViews.put(BASE_ITEM_TYPE_FOOTER++, view);</span><br><span class="line">        &#125;</span><br><span class="line">        notifyDataSetChanged();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeHeaderView</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = mHeaderViews.indexOfValue(view);</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mHeaderViews.removeAt(index);</span><br><span class="line">        notifyDataSetChanged();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeFooterView</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = mFooterViews.indexOfValue(view);</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mFooterViews.removeAt(index);</span><br><span class="line">        notifyDataSetChanged();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解决GridLayoutManager添加头部和底部不占用一行的问题</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> recycler</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">adjustSpanSize</span><span class="params">(RecyclerView recycler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (recycler.getLayoutManager() <span class="keyword">instanceof</span> GridLayoutManager) &#123;</span><br><span class="line">            <span class="keyword">final</span> GridLayoutManager layoutManager = (GridLayoutManager) recycler.getLayoutManager();</span><br><span class="line">            layoutManager.setSpanSizeLookup(<span class="keyword">new</span> GridLayoutManager.SpanSizeLookup() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSpanSize</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">boolean</span> isHeaderOrFooter =</span><br><span class="line">                            isHeaderPosition(position) || isFooterPosition(position);</span><br><span class="line">                    <span class="keyword">return</span> isHeaderOrFooter ? layoutManager.getSpanCount() : <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="recyclerview代码"><a href="#recyclerview代码" class="headerlink" title="recyclerview代码"></a>recyclerview代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加头部底部RecyclerView  需要先设置Adapter再添加头部或底部</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WrapRecyclerView</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 包裹了一层的头部底部Adapter</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> WrapRecyclerAdapter mWrapRecyclerAdapter;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这个是列表数据的Adapter</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> RecyclerView.Adapter mAdapter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AdapterDataObserver mDataObserver = <span class="keyword">new</span> AdapterDataObserver() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChanged</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (mAdapter == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 观察者  列表Adapter更新 包裹的也需要更新不然列表的notifyDataSetChanged没效果</span></span><br><span class="line">            <span class="keyword">if</span> (mWrapRecyclerAdapter != mAdapter) &#123;</span><br><span class="line">                mWrapRecyclerAdapter.notifyDataSetChanged();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemRangeRemoved</span><span class="params">(<span class="keyword">int</span> positionStart, <span class="keyword">int</span> itemCount)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (mAdapter == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 观察者  列表Adapter更新 包裹的也需要更新不然列表的notifyDataSetChanged没效果</span></span><br><span class="line">            <span class="keyword">if</span> (mWrapRecyclerAdapter != mAdapter) &#123;</span><br><span class="line">                mWrapRecyclerAdapter.notifyItemRemoved(positionStart);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemRangeMoved</span><span class="params">(<span class="keyword">int</span> fromPosition, <span class="keyword">int</span> toPosition, <span class="keyword">int</span> itemCount)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (mAdapter == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 观察者  列表Adapter更新 包裹的也需要更新不然列表的notifyItemMoved没效果</span></span><br><span class="line">            <span class="keyword">if</span> (mWrapRecyclerAdapter != mAdapter) &#123;</span><br><span class="line">                mWrapRecyclerAdapter.notifyItemMoved(fromPosition, toPosition);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemRangeChanged</span><span class="params">(<span class="keyword">int</span> positionStart, <span class="keyword">int</span> itemCount)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (mAdapter == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 观察者  列表Adapter更新 包裹的也需要更新不然列表的notifyItemChanged没效果</span></span><br><span class="line">            <span class="keyword">if</span> (mWrapRecyclerAdapter != mAdapter) &#123;</span><br><span class="line">                mWrapRecyclerAdapter.notifyItemChanged(positionStart);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemRangeChanged</span><span class="params">(<span class="keyword">int</span> positionStart, <span class="keyword">int</span> itemCount, Object payload)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (mAdapter == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 观察者  列表Adapter更新 包裹的也需要更新不然列表的notifyItemChanged没效果</span></span><br><span class="line">            <span class="keyword">if</span> (mWrapRecyclerAdapter != mAdapter) &#123;</span><br><span class="line">                mWrapRecyclerAdapter.notifyItemChanged(positionStart,payload);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemRangeInserted</span><span class="params">(<span class="keyword">int</span> positionStart, <span class="keyword">int</span> itemCount)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (mAdapter == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 观察者  列表Adapter更新 包裹的也需要更新不然列表的notifyItemInserted没效果</span></span><br><span class="line">            <span class="keyword">if</span> (mWrapRecyclerAdapter != mAdapter) &#123;</span><br><span class="line">                mWrapRecyclerAdapter.notifyItemInserted(positionStart);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WrapRecyclerView</span><span class="params">(<span class="meta">@NonNull</span> Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WrapRecyclerView</span><span class="params">(<span class="meta">@NonNull</span> Context context, <span class="meta">@Nullable</span> AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, attrs, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WrapRecyclerView</span><span class="params">(<span class="meta">@NonNull</span> Context context, <span class="meta">@Nullable</span> AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAdapter</span><span class="params">(<span class="meta">@Nullable</span> Adapter adapter)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 为了防止多次设置Adapter</span></span><br><span class="line">        <span class="keyword">if</span> (mAdapter != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mAdapter.unregisterAdapterDataObserver(mDataObserver);</span><br><span class="line">            mAdapter = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.mAdapter = adapter;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (adapter <span class="keyword">instanceof</span> WrapRecyclerAdapter) &#123;</span><br><span class="line">            mWrapRecyclerAdapter = (WrapRecyclerAdapter) adapter;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mWrapRecyclerAdapter = <span class="keyword">new</span> WrapRecyclerAdapter(adapter);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>.setAdapter(mWrapRecyclerAdapter);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注册一个观察者 删除的问题 列表的adapter改变了,但是WrapRecyclerAdapter没改变</span></span><br><span class="line">        mAdapter.registerAdapterDataObserver(mDataObserver);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解决GridLayout添加头部和底部也要占据一行</span></span><br><span class="line">        mWrapRecyclerAdapter.adjustSpanSize(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addHeaderView</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mAdapter != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mWrapRecyclerAdapter.addHeaderView(view);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFooterView</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mAdapter != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mWrapRecyclerAdapter.addFooterView(view);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeHeaderView</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mAdapter != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mWrapRecyclerAdapter.removeHeaderView(view);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeFooterView</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mAdapter != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mWrapRecyclerAdapter.removeFooterView(view);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>稍微玩点高级的就需要重写</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><a href="https://gitee.com/wuzixuan97/rv_plus.git">https://gitee.com/wuzixuan97/rv_plus.git</a></p>
<h2 id="问题和建议"><a href="#问题和建议" class="headerlink" title="问题和建议"></a>问题和建议</h2>]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>recyclerview</tag>
      </tags>
  </entry>
  <entry>
    <title>recyclerview系列教程——实现多条目布局</title>
    <url>/honor.github.io/2020/12/29/rv-mutltype/</url>
    <content><![CDATA[<h1 id="recyclerview系列教程——实现多条目布局"><a href="#recyclerview系列教程——实现多条目布局" class="headerlink" title="recyclerview系列教程——实现多条目布局"></a>recyclerview系列教程——实现多条目布局</h1><p>hello，今天带你实现模仿今日头条效果的recyclerview的多条目布局</p>
<h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><p><img src="https://img-blog.csdnimg.cn/20201229175636796.gif" alt="img"></p>
<h2 id="知识储备"><a href="#知识储备" class="headerlink" title="知识储备"></a>知识储备</h2><h3 id="viewtype"><a href="#viewtype" class="headerlink" title="viewtype"></a>viewtype</h3><p>在重写onCreateViewHolder的方法中我们会发现第二个参数是int类型的，如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> RecyclerView.<span class="function">ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(<span class="meta">@NonNull</span> ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//将要实现的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>viewtype就是为了实现根据不同的viewtype的值返回不同的viewholder，最终可以实现多条目的效果</p>
<h3 id="getItemViewType"><a href="#getItemViewType" class="headerlink" title="getItemViewType()"></a>getItemViewType()</h3><p>需要重写这个方法，告诉适配器当前的数据应该用什么布局来装载，如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemViewType</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="comment">/*int 类型 的返回值*/</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><h3 id="a，重写adaptar"><a href="#a，重写adaptar" class="headerlink" title="a，重写adaptar"></a>a，重写adaptar</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RVTypeAdaptar</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 只有文字布局</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_ONE_TEXT = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文字和图片布局</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_TWO_TEXTANDIMG = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 广告布局</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_TREE_ADV = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">private</span> Context context;</span><br><span class="line">    <span class="keyword">private</span> List&lt;TypeBean&gt; datas;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RVTypeAdaptar</span><span class="params">(Context context, List&lt;TypeBean&gt; datas)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.context = context;</span><br><span class="line">        <span class="keyword">this</span>.datas = datas;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> RecyclerView.<span class="function">ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(<span class="meta">@NonNull</span> ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (viewType == TYPE_ONE_TEXT)&#123;</span><br><span class="line">            View view = LayoutInflater.from(context).inflate(R.layout.rv_type_item1, parent, <span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> TypeOneHolder(view);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (viewType == TYPE_TWO_TEXTANDIMG)&#123;</span><br><span class="line">            View view = LayoutInflater.from(context).inflate(R.layout.rv_type_item2, parent, <span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> TypeTwoHolder(view);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            View view = LayoutInflater.from(context).inflate(R.layout.rv_type_item3, parent, <span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> TypeThreeHolder(view);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(<span class="meta">@NonNull</span> RecyclerView.ViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (holder.getItemViewType())&#123;</span><br><span class="line">            <span class="keyword">case</span> TYPE_ONE_TEXT:</span><br><span class="line">                TypeOneHolder holder1 = (TypeOneHolder) holder;</span><br><span class="line">                holder1.textView.setText(datas.get(position).getDesc()+<span class="string">&quot;    one&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> TYPE_TWO_TEXTANDIMG:</span><br><span class="line">                TypeTwoHolder holder2 = (TypeTwoHolder) holder;</span><br><span class="line">                holder2.textView.setText(datas.get(position).getDesc()+<span class="string">&quot;    two&quot;</span>);</span><br><span class="line">                Glide.with(context)</span><br><span class="line">                        .load(datas.get(position).getImg1Url())</span><br><span class="line">                        .into(holder2.iv1_type_2);</span><br><span class="line">                Glide.with(context)</span><br><span class="line">                        .load(datas.get(position).getImg2Url())</span><br><span class="line">                        .into(holder2.iv2_type_2);</span><br><span class="line">                Glide.with(context)</span><br><span class="line">                        .load(datas.get(position).getImg3Url())</span><br><span class="line">                        .into(holder2.iv3_type_2);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> TYPE_TREE_ADV:</span><br><span class="line">                TypeThreeHolder holder3 = (TypeThreeHolder) holder;</span><br><span class="line">                holder3.textView.setText(datas.get(position).getDesc()+<span class="string">&quot;    three&quot;</span>);</span><br><span class="line">                Glide.with(context)</span><br><span class="line">                        .load(datas.get(position).getAdvImgUrl())</span><br><span class="line">                        .into(holder3.iv_type_3);</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemViewType</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.parseInt(datas.get(position).getHolderType());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> datas.size();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TypeOneHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</span><br><span class="line">        TextView textView;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TypeOneHolder</span><span class="params">(<span class="meta">@NonNull</span> View itemView)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(itemView);</span><br><span class="line">            textView = itemView.findViewById(R.id.tv_type_1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TypeTwoHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</span><br><span class="line">        TextView textView;</span><br><span class="line">        ImageView iv1_type_2,iv2_type_2,iv3_type_2;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TypeTwoHolder</span><span class="params">(<span class="meta">@NonNull</span> View itemView)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(itemView);</span><br><span class="line">            textView = itemView.findViewById(R.id.tv_type_2);</span><br><span class="line">            iv1_type_2 = itemView.findViewById(R.id.iv1_type_2);</span><br><span class="line">            iv2_type_2 = itemView.findViewById(R.id.iv2_type_2);</span><br><span class="line">            iv3_type_2 = itemView.findViewById(R.id.iv3_type_2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TypeThreeHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</span><br><span class="line">        TextView textView;</span><br><span class="line">        ImageView iv_type_3;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TypeThreeHolder</span><span class="params">(<span class="meta">@NonNull</span> View itemView)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(itemView);</span><br><span class="line">            textView = itemView.findViewById(R.id.tv_type_3);</span><br><span class="line">            iv_type_3 = itemView.findViewById(R.id.iv_type_3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="b-设置数据"><a href="#b-设置数据" class="headerlink" title="b,设置数据"></a>b,设置数据</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TypeBean</span> </span>&#123;</span><br><span class="line">    <span class="comment">//类型</span></span><br><span class="line">    <span class="keyword">private</span> String holderType;</span><br><span class="line">    <span class="comment">//文字描述</span></span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line">    <span class="comment">//照片</span></span><br><span class="line">    <span class="keyword">private</span> String img1Url;</span><br><span class="line">    <span class="keyword">private</span> String img2Url;</span><br><span class="line">    <span class="keyword">private</span> String img3Url;</span><br><span class="line">    <span class="comment">//广告图片</span></span><br><span class="line">    <span class="keyword">private</span> String advImgUrl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>c,其余步骤和上一篇博客内容相同，如果还不太明白，可以下载代码地址</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>根据不同的viewtype显示不同的viewhoder，实体类要有相应的字段</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><a href="https://gitee.com/wuzixuan97/rv_plus.git">https://gitee.com/wuzixuan97/rv_plus.git</a></p>
<h2 id="问题和建议"><a href="#问题和建议" class="headerlink" title="问题和建议"></a>问题和建议</h2>]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>recyclerview</tag>
      </tags>
  </entry>
  <entry>
    <title>recyclerview系列教程——实现三种布局</title>
    <url>/honor.github.io/2020/12/29/rv-simple/</url>
    <content><![CDATA[<h1 id="recyclerview系列教程——实现三种布局"><a href="#recyclerview系列教程——实现三种布局" class="headerlink" title="recyclerview系列教程——实现三种布局"></a>recyclerview系列教程——实现三种布局</h1><h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><p><img src="https://img-blog.csdnimg.cn/20201229175635743.gif"></p>
<h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><h3 id="引入资源包（app-build-gradle）"><a href="#引入资源包（app-build-gradle）" class="headerlink" title="引入资源包（app/build.gradle）"></a>引入资源包（app/build.gradle）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">implementation <span class="string">&#x27;androidx.recyclerview:recyclerview:1.1.0&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="设置adaptar"><a href="#设置adaptar" class="headerlink" title="设置adaptar"></a>设置adaptar</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RVSimpleAdaptar</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">RVSimpleAdaptar</span>.<span class="title">InnerHoder</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Context context;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; datas;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RVSimpleAdaptar</span><span class="params">(Context context, List&lt;String&gt; datas)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.context = context;</span><br><span class="line">        <span class="keyword">this</span>.datas = datas;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> InnerHoder <span class="title">onCreateViewHolder</span><span class="params">(<span class="meta">@NonNull</span> ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">        View view = LayoutInflater.from(context).inflate(R.layout.rv_simple_item, parent, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> InnerHoder(view);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(<span class="meta">@NonNull</span> InnerHoder holder, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        holder.textView.setText(datas.get(position));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> datas.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerHoder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</span><br><span class="line">        TextView textView;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">InnerHoder</span><span class="params">(<span class="meta">@NonNull</span> View itemView)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(itemView);</span><br><span class="line">            textView = itemView.findViewById(R.id.tv_simple);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="activity中绑定数据，设置属性"><a href="#activity中绑定数据，设置属性" class="headerlink" title="activity中绑定数据，设置属性"></a>activity中绑定数据，设置属性</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RVSimpleActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> RecyclerView rv_simple;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; datalist;</span><br><span class="line">    <span class="keyword">private</span> RVSimpleAdaptar rvSimpleAdaptar;</span><br><span class="line">    <span class="keyword">private</span> RadioGroup btn_group_simple;</span><br><span class="line">    <span class="keyword">private</span> RadioButton rb_vertical,rb_grid,rb_stage;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.rv_siimple);</span><br><span class="line">        rv_simple = findViewById(R.id.rv_simple);</span><br><span class="line">        btn_group_simple = findViewById(R.id.btn_group_simple);</span><br><span class="line">        rb_vertical = findViewById(R.id.rb_vertical);</span><br><span class="line">        rb_vertical.setChecked(<span class="keyword">true</span>);</span><br><span class="line">        rb_grid = findViewById(R.id.rb_grid);</span><br><span class="line">        rb_stage = findViewById(R.id.rb_stage);</span><br><span class="line">        rv_simple.setLayoutManager(<span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>));</span><br><span class="line">        datalist = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">            datalist.add(<span class="string">&quot;I am &quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">        rvSimpleAdaptar = <span class="keyword">new</span> RVSimpleAdaptar(<span class="keyword">this</span>,datalist);</span><br><span class="line">        rv_simple.setAdapter(rvSimpleAdaptar);</span><br><span class="line">        btn_group_simple.setOnCheckedChangeListener(<span class="keyword">new</span> RadioGroup.OnCheckedChangeListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCheckedChanged</span><span class="params">(RadioGroup group, <span class="keyword">int</span> checkedId)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">switch</span> (checkedId)&#123;</span><br><span class="line">                    <span class="keyword">case</span> R.id.rb_vertical:</span><br><span class="line">                        rv_simple.setLayoutManager(<span class="keyword">new</span> LinearLayoutManager(RVSimpleActivity.<span class="keyword">this</span>));</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> R.id.rb_stage:</span><br><span class="line">                        rv_simple.setLayoutManager(<span class="keyword">new</span> StaggeredGridLayoutManager(<span class="number">4</span>,StaggeredGridLayoutManager.VERTICAL));</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> R.id.rb_grid:</span><br><span class="line">                        rv_simple.setLayoutManager(<span class="keyword">new</span> GridLayoutManager(RVSimpleActivity.<span class="keyword">this</span>,<span class="number">3</span>));</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>布局rv_siimple代码</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;LinearLayout</span><br><span class="line">    android:orientation=<span class="string">&quot;vertical&quot;</span></span><br><span class="line">    xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span> android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:layout_height=<span class="string">&quot;match_parent&quot;</span>&gt;</span><br><span class="line">    &lt;RadioGroup</span><br><span class="line">        android:id=<span class="string">&quot;@+id/btn_group_simple&quot;</span></span><br><span class="line">        android:orientation=<span class="string">&quot;horizontal&quot;</span></span><br><span class="line">        android:gravity=<span class="string">&quot;center&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span>&gt;</span><br><span class="line">        &lt;RadioButton</span><br><span class="line">            android:id=<span class="string">&quot;@+id/rb_vertical&quot;</span></span><br><span class="line">            android:text=<span class="string">&quot;垂直布局&quot;</span></span><br><span class="line">            android:textSize=<span class="string">&quot;20sp&quot;</span></span><br><span class="line">            android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">            android:layout_height=<span class="string">&quot;wrap_content&quot;</span>/&gt;</span><br><span class="line">        &lt;RadioButton</span><br><span class="line">            android:id=<span class="string">&quot;@+id/rb_grid&quot;</span></span><br><span class="line">            android:text=<span class="string">&quot;网格布局&quot;</span></span><br><span class="line">            android:textSize=<span class="string">&quot;20sp&quot;</span></span><br><span class="line">            android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">            android:layout_height=<span class="string">&quot;wrap_content&quot;</span>/&gt;</span><br><span class="line">        &lt;RadioButton</span><br><span class="line">            android:id=<span class="string">&quot;@+id/rb_stage&quot;</span></span><br><span class="line">            android:text=<span class="string">&quot;瀑布流布局&quot;</span></span><br><span class="line">            android:textSize=<span class="string">&quot;20sp&quot;</span></span><br><span class="line">            android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">            android:layout_height=<span class="string">&quot;wrap_content&quot;</span>/&gt;</span><br><span class="line">    &lt;/RadioGroup&gt;</span><br><span class="line">    &lt;androidx.recyclerview.widget.RecyclerView</span><br><span class="line">        android:id=<span class="string">&quot;@+id/rv_simple&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;match_parent&quot;</span>/&gt;</span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>
<p>布局rv_simple_item代码</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line">&lt;LinearLayout</span><br><span class="line">    android:orientation=<span class="string">&quot;horizontal&quot;</span></span><br><span class="line">    android:padding=<span class="string">&quot;4dp&quot;</span></span><br><span class="line">    xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span> android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:layout_height=<span class="string">&quot;wrap_content&quot;</span>&gt;</span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:id=<span class="string">&quot;@+id/tv_simple&quot;</span></span><br><span class="line">        android:background=<span class="string">&quot;#B3DAEC&quot;</span></span><br><span class="line">        android:text=<span class="string">&quot;我是默认数据&quot;</span></span><br><span class="line">        android:gravity=<span class="string">&quot;center&quot;</span></span><br><span class="line">        android:textSize=<span class="string">&quot;25sp&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span>/&gt;</span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>引入资源包，重写adaptar，在activity中绑定布局，对recyclerview控件进行相关设置</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><a href="https://gitee.com/wuzixuan97/rv_plus.git">https://gitee.com/wuzixuan97/rv_plus.git</a></p>
<h2 id="问题和建议"><a href="#问题和建议" class="headerlink" title="问题和建议"></a>问题和建议</h2>]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>recyclerview</tag>
      </tags>
  </entry>
  <entry>
    <title>recyclerview系列教程——实现拖动排序和侧滑删除</title>
    <url>/honor.github.io/2020/12/29/rv-sort/</url>
    <content><![CDATA[<h1 id="recyclerview系列教程——实现拖动排序和侧滑删除"><a href="#recyclerview系列教程——实现拖动排序和侧滑删除" class="headerlink" title="recyclerview系列教程——实现拖动排序和侧滑删除"></a>recyclerview系列教程——实现拖动排序和侧滑删除</h1><h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><p><img src="https://img-blog.csdnimg.cn/20201229175628154.gif" alt="img"></p>
<h2 id="知识储备"><a href="#知识储备" class="headerlink" title="知识储备"></a>知识储备</h2><h3 id="ItemTouchHelper"><a href="#ItemTouchHelper" class="headerlink" title="ItemTouchHelper"></a>ItemTouchHelper</h3><p>是什么，先看一下官方解释</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">This is a utility <span class="class"><span class="keyword">class</span> <span class="title">to</span> <span class="title">add</span> <span class="title">swipe</span> <span class="title">to</span> <span class="title">dismiss</span> <span class="title">and</span> <span class="title">drag</span> &amp; <span class="title">drop</span> <span class="title">support</span> <span class="title">to</span> <span class="title">RecyclerView</span>.</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">It</span> <span class="title">works</span> <span class="title">with</span> <span class="title">a</span> <span class="title">RecyclerView</span> <span class="title">and</span> <span class="title">a</span> <span class="title">Callback</span> <span class="title">class</span>, <span class="title">which</span> <span class="title">configures</span> <span class="title">what</span> <span class="title">type</span> <span class="title">of</span> <span class="title">interactions</span></span></span><br><span class="line"><span class="class"> <span class="title">are</span> <span class="title">enabled</span> <span class="title">and</span> <span class="title">also</span> <span class="title">receives</span> <span class="title">events</span> <span class="title">when</span> <span class="title">user</span> <span class="title">performs</span> <span class="title">these</span> <span class="title">actions</span>.</span></span><br></pre></td></tr></table></figure>
<p>翻译一下</p>
<p>这是一个实用程序类，用于添加滑动以取消，以及拖放对RecyclerView的支持。它与RecyclerView和回调类一起工作，后者配置什么类型的交互，当用户执行这些操作时，将启用并接收事件。ok，开始干货</p>
<h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><p>在activtiy中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ItemTouchHelper itemTouchHelper = <span class="keyword">new</span> ItemTouchHelper(<span class="keyword">new</span> ItemTouchHelper.Callback() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMovementFlags</span><span class="params">(<span class="meta">@NonNull</span> RecyclerView recyclerView, <span class="meta">@NonNull</span> RecyclerView.ViewHolder viewHolder)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取触摸响应的方向   包含两个 1.拖动dragFlags 2.侧滑删除swipeFlags</span></span><br><span class="line">        <span class="comment">// 代表只能是向左侧滑删除，当前可以是这样ItemTouchHelper.LEFT|ItemTouchHelper.RIGHT</span></span><br><span class="line">        <span class="keyword">int</span> swipeFlags = ItemTouchHelper.LEFT;</span><br><span class="line">        <span class="comment">// 拖动方向</span></span><br><span class="line">        <span class="keyword">int</span> dragFlags = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (recyclerView.getLayoutManager() <span class="keyword">instanceof</span> GridLayoutManager) &#123;</span><br><span class="line">            dragFlags = ItemTouchHelper.LEFT | ItemTouchHelper.RIGHT | ItemTouchHelper.UP | ItemTouchHelper.DOWN;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            dragFlags = ItemTouchHelper.UP | ItemTouchHelper.DOWN;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> makeMovementFlags(dragFlags, swipeFlags);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onMove</span><span class="params">(<span class="meta">@NonNull</span> RecyclerView recyclerView, <span class="meta">@NonNull</span> RecyclerView.ViewHolder viewHolder, <span class="meta">@NonNull</span> RecyclerView.ViewHolder target)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 拖动的时候会不断的回调这个方法</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取原来的位置</span></span><br><span class="line">        <span class="keyword">int</span> fromPosition = viewHolder.getAdapterPosition();</span><br><span class="line">        <span class="comment">// 目标位置</span></span><br><span class="line">        <span class="keyword">int</span> targetPosition = target.getAdapterPosition();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 改变实际的数据集</span></span><br><span class="line">        <span class="keyword">if</span> (fromPosition &lt; targetPosition) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = fromPosition; i &lt;targetPosition ; i++) &#123;</span><br><span class="line">                Collections.swap(mDatas, i, i + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = fromPosition; i &gt; targetPosition; i--) &#123;</span><br><span class="line">                Collections.swap(mDatas, i, i - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        adapter.notifyItemMoved(fromPosition, targetPosition);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSwiped</span><span class="params">(<span class="meta">@NonNull</span> RecyclerView.ViewHolder viewHolder, <span class="keyword">int</span> direction)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 侧滑删除之后的回调方法</span></span><br><span class="line">        <span class="keyword">int</span> position = viewHolder.getAdapterPosition();</span><br><span class="line">        mDatas.remove(position);</span><br><span class="line">        adapter.notifyItemRemoved(position);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSelectedChanged</span><span class="params">(<span class="meta">@Nullable</span> RecyclerView.ViewHolder viewHolder, <span class="keyword">int</span> actionState)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 拖动选择状态改变回调</span></span><br><span class="line">        <span class="keyword">if</span> (actionState != ItemTouchHelper.ACTION_STATE_IDLE) &#123;</span><br><span class="line">            viewHolder.itemView.setBackgroundColor(Color.GRAY);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clearView</span><span class="params">(<span class="meta">@NonNull</span> RecyclerView recyclerView, <span class="meta">@NonNull</span> RecyclerView.ViewHolder viewHolder)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 回到正常状态的时候回调</span></span><br><span class="line">        viewHolder.itemView.setBackgroundColor(Color.TRANSPARENT);</span><br><span class="line">        <span class="comment">// 解决侧滑删除时由于item复用出现的不显示问题</span></span><br><span class="line">        viewHolder.itemView.setTranslationX(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">itemTouchHelper.attachToRecyclerView(rv_drag_sort);</span><br></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>设置ItemTouchHelper  重写回调方法</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><a href="https://gitee.com/wuzixuan97/rv_plus.git">https://gitee.com/wuzixuan97/rv_plus.git</a></p>
<h2 id="问题和建议"><a href="#问题和建议" class="headerlink" title="问题和建议"></a>问题和建议</h2>]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>recyclerview</tag>
      </tags>
  </entry>
  <entry>
    <title>recyclerview系列教程——实现时间轴布局</title>
    <url>/honor.github.io/2020/12/30/rv-time/</url>
    <content><![CDATA[<h1 id="recyclerview系列教程——实现时间轴布局"><a href="#recyclerview系列教程——实现时间轴布局" class="headerlink" title="recyclerview系列教程——实现时间轴布局"></a>recyclerview系列教程——实现时间轴布局</h1><h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><p><img src="https://img-blog.csdnimg.cn/20201230144323211.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d1X3ppeHVhbjk3,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h2 id="知识储备"><a href="#知识储备" class="headerlink" title="知识储备"></a>知识储备</h2><p>好好看看之前的博客，你绝对能自己写出来</p>
<h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p>这可不是简简单单的多条目布局的实现，是按照一定规律的，我们可以把它分解来看，一个是看做日期标题，一个看做消费清单，这是两个布局（废话），这是两个recyclerview！（有点东西哈），没错，这就是两个recyclerview，至于怎么去实现，我们可以先手动把详细的消费清单先去除，然后专门看日期标题的recyclerview，嗯，没错，很简单，我们现在要在adaptar中加入一个recyclerview实现嵌套的作用，以下看干货代码</p>
<h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><h3 id="a-编写javaBean"><a href="#a-编写javaBean" class="headerlink" title="a,编写javaBean"></a>a,编写javaBean</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HistoryBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String dataStr;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; contentBeans;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HistoryBean</span><span class="params">(String dataStr, List&lt;String&gt; contentBeans)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dataStr = dataStr;</span><br><span class="line">        <span class="keyword">this</span>.contentBeans = contentBeans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDataStr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dataStr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDataStr</span><span class="params">(String dataStr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dataStr = dataStr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getContentBeans</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> contentBeans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContentBeans</span><span class="params">(List&lt;String&gt; contentBeans)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.contentBeans = contentBeans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="b-编写adaptar"><a href="#b-编写adaptar" class="headerlink" title="b,编写adaptar"></a>b,编写adaptar</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HistoryAdaptar</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">RecyclerView</span>.<span class="title">ViewHolder</span>&gt; </span>&#123;</span><br><span class="line">    List&lt;HistoryBean&gt; historyBeanList;</span><br><span class="line">    Context context;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HistoryAdaptar</span><span class="params">(List&lt;HistoryBean&gt; historyBeanList, Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.historyBeanList = historyBeanList;</span><br><span class="line">        <span class="keyword">this</span>.context = context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> RecyclerView.<span class="function">ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(<span class="meta">@NonNull</span> ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">        View view = LayoutInflater.from(context).inflate(R.layout.hitstory_list_title,parent,<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TimeLineTitleViewHolder(view);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(<span class="meta">@NonNull</span> RecyclerView.ViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        HistoryBean historyBean = historyBeanList.get(position);</span><br><span class="line">        <span class="keyword">if</span> (holder <span class="keyword">instanceof</span> TimeLineTitleViewHolder)&#123;</span><br><span class="line">            ((TimeLineTitleViewHolder) holder).textView.setText(historyBean.getDataStr());</span><br><span class="line">            RecyclerView contentRv = ((TimeLineTitleViewHolder) holder).recyclerView;</span><br><span class="line">            contentRv.setLayoutManager(<span class="keyword">new</span> LinearLayoutManager(context));</span><br><span class="line">            ContentAdaptar contentAdaptar = <span class="keyword">new</span> ContentAdaptar(context,historyBean.getContentBeans());</span><br><span class="line">            contentRv.setAdapter(contentAdaptar);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> historyBeanList.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TimeLineTitleViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span></span>&#123;</span><br><span class="line">        TextView textView;</span><br><span class="line">        RecyclerView recyclerView;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TimeLineTitleViewHolder</span><span class="params">(<span class="meta">@NonNull</span> View itemView)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(itemView);</span><br><span class="line">            textView = itemView.findViewById(R.id.tv_his_date);</span><br><span class="line">            recyclerView = itemView.findViewById(R.id.rv_content);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ContentAdaptar</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">ContentAdaptar</span>.<span class="title">InnerHolder</span>&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> Context context;</span><br><span class="line">        <span class="keyword">public</span> List&lt;String&gt; strs;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ContentAdaptar</span><span class="params">(Context context, List&lt;String&gt; strs)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.context = context;</span><br><span class="line">            <span class="keyword">this</span>.strs = strs;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@NonNull</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> ContentAdaptar.<span class="function">InnerHolder <span class="title">onCreateViewHolder</span><span class="params">(<span class="meta">@NonNull</span> ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">            View view = LayoutInflater.from(context).inflate(R.layout.history_list_content,parent,<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> InnerHolder(view);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(<span class="meta">@NonNull</span> ContentAdaptar.InnerHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">            holder.textView.setText(strs.get(position));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> strs.size();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</span><br><span class="line">            TextView textView;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">InnerHolder</span><span class="params">(<span class="meta">@NonNull</span> View itemView)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">super</span>(itemView);</span><br><span class="line">                textView = itemView.findViewById(R.id.tv_his_content);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>没想到吧，recyclerview就是这么强大，以后还带你实现微信通讯录界面的效果呢，敬请期待吧</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><a href="https://gitee.com/wuzixuan97/recyclerview-timeline-layout.git">https://gitee.com/wuzixuan97/recyclerview-timeline-layout.git</a></p>
<h2 id="问题和建议"><a href="#问题和建议" class="headerlink" title="问题和建议"></a>问题和建议</h2>]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>recyclerview</tag>
      </tags>
  </entry>
  <entry>
    <title>textone</title>
    <url>/honor.github.io/2020/12/24/textone/</url>
    <content><![CDATA[<p>这是测试的文章这是测试的文章这是测试的文章这是测试的文章这是测试的文章这是测试的文章这是测试的文章这是测试的文章这是测试的文章这是测试的文章这是测试的文章</p>
]]></content>
      <categories>
        <category>分类1</category>
      </categories>
      <tags>
        <tag>标签1</tag>
        <tag>标签2</tag>
        <tag>标签3</tag>
      </tags>
  </entry>
</search>
